- Class: meta
  Course: mbb343
  Lesson: lab01
  Author: Julia Philipp, Bruno Grande
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.5

- Class: text
  Output: There are a lot of moving parts in data science, but what better place to start than with the tools. While basic data science can be accomplished using programs with graphical user interfaces like Excel, programming languages are readily scalable and can open up a world of possibilities. They also tend to bring together a community of like-minded individuals. In this series of tutorials, we choose R over other languages such as Python and Julia because it was designed with data at its heart and is surrounded by a thriving, inclusive, and helpful community.
  
- Class: text
  Output: Another reason we choose R is its tight integration with the RStudio integrated development environment (IDE). IDEs serve to streamline programming, which has many moving parts. One key benefit of RStudio compared to other IDEs is that it shares the same free and open-source philosophy as the R programming language. We believe in the democratization of data science. Over the coming tutorials, you will come to appreciate the many features offered by RStudio. For today, we will focus on its integrated text editor and R console. 

- Class: text
  Output: In this tutorial, you will become familiar with the RStudio interface and start writing your first R code. If this is your first time programming, then you're in for a rewarding journey! You will be introduced to fundamental programming concepts like operators and variables. You will also see functions in actions and why they're so useful in programming. Finally, you will already start practising how to seek for help using online resources. This skill is critical for any data scientist.

# instructions on how to use the R interface
# doesn't really make too much sense here

- Class: text
  Output: Mathematical Operators!
  
- Class: text 
  Output: Now that you have a handle on the RStudio interface, you can get your hands dirty with some R code! You can start writing any code posted below in a new R script and run each line using the Run button (or keyboard shortcut).

- Class: cmd_question
  Output: Let's start with a simple calculation and break it down. Here, you are adding two numbers, 1 and 100, together using the `+` operator. When this bit of R code is run in the Console, you get the total, which is 101. For now, you can ignore the `[1]` appearing before the total. It will make more sense after the next tutorial.
  CorrectAnswer: 1+100
  AnswerTests: any_of_exprs('1+100', '100+1')
  Hint: Try typing 1+100

- Class: text
  Output: "As expected, you have access to the usual set of arithmetic operations in R. They follow the same precedence as in mathematics, namely:"

- Class: text
  Output: "Parentheses: `(` and `)`"
  
- Class: text
  Output: "Exponents: `^`"
  
- Class: text
  Output: "Multiply: `*`"
  
- Class: text
  Output: "Divide: `/`"
  
- Class: text
  Output: "Add: `+`"
  
- Class: text
  Output: "Subtract: `-`"
  
- Class: cmd_question
  Output: "To demonstrate operator precedence, run the following line of R code, also known as a statement:  3 + 5 * 2 The result you will get (`13`) is consistent with the multiplication being calculated before the addition."
  CorrectAnswer: 3 + 5 * 2
  AnswerTests: omnitest(correctExpr='3 + 5 * 2')
  Hint: Try typing 3 + 5 * 2

- Class: cmd_question
  Output: "Just like in arithmetic, you can override the order of operations with parentheses, as follows: (3 + 5) * 2 The following statement outputs `16`, which is the correct output if the addition is performed before the multiplication."
  CorrectAnswer: (3 + 5) * 2
  AnswerTests: omnitest(correctExpr='(3 + 5) * 2')
  Hint: Try typing (3 + 5) * 2
  
- Class: text
  Output: You can also choose to add parentheses to improve readability, even if they don't change the precedence of the operations. There is a careful balance to strike with parentheses. As you can see in the first example below, too many parentheses can hinder readability. Ultimately, this is a stylistic choice that is up to personal preference.
  
- Class: text
  Output: (3 + (5 * (2 ^ 2))) - is hard to read
  
- Class: text
  Output: 3 + 5 * 2 ^ 2 - is clear if you remember the rules
  
- Class: text
  Output: 3 + 5 * (2 ^ 2) - if you forget some rules, this might help
  
# explain commenting here

#- Class: cmd_question
#  Output: "try typing #this is a comment"
#  CorrectAnswer: "#"this is a comment
#  AnswerTests: omnitest(correctExpr='#this is a comment')
#  Hint: try this

- Class: text
  Output: "Sooner or later, you will eventually hear the verb 'comment out', usually in the context of 'turning off' some chunk of code. This refers to the act of prefixing the lines of code in question with the comment character (`#` in R). It's useful to comment out old lines of code that are no longer relevant, but you want to keep them for future reference. "

- Class: text
  Output: If you generate an output consisting of a very small or large number, you might run into the scientific notation. For example, the fraction two millionths is displayed as `2e-06`, which can be interpreted as $2 \times 10^{-6}$. It's important to note that the `e` here has nothing to do with the Euler's number, $e$.

- Class: cmd_question
  Output: "See for yourself by executing the expression 2 / 1000000"
  CorrectAnswer: 2 / 1000000
  AnswerTests: omnitest(correctExpr='2 / 1000000')
  Hint: Try typing 2 / 1000000
  
- Class: text
  Output: In addition to seeing the notation in the output, you can use it yourself to express very small or large numbers. The output may or may not be in scientific notation, depending on how small/large the number is and how your R is configured. For more information, you can look up the `scipen` (_i.e._ penalty for scientific notation) under the R options using `?options`.

- Class: cmd_question
  Output: Try executing the expression 4e-5 - a small positive number
  CorrectAnswer: 4e-5
  AnswerTests: omnitest(correctExpr='4e-5')
  Hint: Try typing 4e-5 
  
- Class: cmd_question
  Output: Try executing the expression -2.3e7 - a large negative number
  CorrectAnswer: -2.3e7
  AnswerTests: omnitest(correctExpr='-2.3e7')
  Hint: Try typing -2.3e7
  
- Class: cmd_question
  Output: Try executing the expression 1e2 - it's 100 expressed in scientific notation (but usually not output as such)
  CorrectAnswer: 1e2
  AnswerTests: omnitest(correctExpr='1e2')
  Hint: Try typing 1e2

- Class: text
  Output: "Now that you're running R code, your Console will look something like this sooner or later. The `>` character indicates where you can run code and is known as the prompt. The prompt becomes a plus sign (`+`) when it wants to indicate that it's expecting additional input. Here, R is expecting more code because you haven't provided the second value for the multiplication. Note that the `+` prompt (_i.e._ as the first character of the line) has nothing to do with the addition (`+`) operator." 
  
# not sure i can pack that into a question without throwing an error

- Class: text
  Output: To get rid of the issue, you can complete the operation. In this case, if you provide a second value in the Console and press Enter, you obtain the expected output. Again, the `+` only indicates that the two lines are connected. The operation that was actually performed was `2 * 4`. 

- Class: text
  Output: Alternatively, you can press the Escape key to cancel the current operation. In this case, the operation will not produce any output, and the usual `>` prompt will return. Once you revert to this normal state. you can perform the full calculation. 

- Class: text
  Output: Mathematical Functions!
  
- Class: text
  Output: "So far, you have been using operators like `+` and `*` for performing mathematical calculations. They take in some inputs (_e.g._ two numbers) and follow some expected behaviour (_e.g._ addition) to produce some output (_e.g._ the sum). This pattern underpins the next important programming concept covered here: functions."
  
- Class: text
  Output: Functions generally have inputs, follow some documented behaviour, and produce some output, just like the operators above. The function inputs are known as arguments or parameters. They determine the behaviour of the function. In most cases, the function will produce the same output if given the same input. One notable exception to this rule is the group of functions that are random in nature (_e.g._ random sampling). 

- Class: text
  Output: "Let's work through an example: calculating the natural logarithm. In the example shown below, you are running the function called `log` with the value of `1`. This is called a function call (_i.e._ when you use/call a function). There are three components: \n 1. The function name (here, `log`) \n 2. The parentheses to indicate you are using/calling the function \n 3. The input to the function within parentheses, which varies based on the function (here, `1`)"

- Class: cmd_question
  Output: Try running log(10)
  CorrectAnswer: log(10)
  AnswerTests: omnitest(correctExpr='log(10)')
  Hint: Try typing log(10)
  
- Class: cmd_question
  Output: If you attempt to run a function without parentheses, you will instead obtain the function definition, _i.e._ the code that tells R what to do when the function is called, usually processing the input in some way. You almost never want to do this. 
  CorrectAnswer: log
  AnswerTests: omnitest(correctExpr='log')
  Hint: Try typing 'log'
  
- Class: text
  Output: "Also, without parentheses, you cannot provide any input. So, don't forget to add parentheses every time you use a function, even if you don't have to provide an input."
  
- Class: text
  Output: "There are countless functions available in R, but you don't have to worry about remembering them all. It's more practical to rely on Google whenever you need to look up a function. Over time, you will come to know the most useful functions. Here are some commented examples: \n cos(1) #trigonometry \n exp(0.5)  # e^(1/2) \n sqrt(9)   # square root of 9"
  
- Class: cmd_question
  Output: "It's worth noting that functions aren't restricted to one input value. For example, the function `rnorm(1,10)` returns one random value (first argument) from a normal distribution centred at a mean of 10 (second argument). As you can see, the arguments are separated by commas. Try running that function"
  CorrectAnswer: rnorm(1,10)
  AnswerTests: omnitest(correctExpr='rnorm(1,10)')
  Hint: Try typing rnorm(1,10)
  
- Class: cmd_question
  Output: "It's important to realize that the order matters. For example, if you swap the two arguments, you get 10 random values from a normal distribution centred at a mean of 1. Notice that you don't get an error. When code technically works but doesn't do what you want it to do is called a logical error. These are the most pernicious of errors because they can pass undetected. Fortunately, it's easy here to see that we're getting nine more numbers than expected. Try it out!"
  CorrectAnswer: rnorm(10,1)
  AnswerTests: omnitest(correctExpr='rnorm(10,1)')
  Hint: Try typing rnorm(10,1)
  
- Class: cmd_question
  Output: You can avoid this pitfall by explicitly naming our arguments. This way, R doesn't assume the order of the arguments. You can list the arguments in whatever order you prefer. Try executing either `rnorm(mean = 10, n = 1)` or `rnorm(n = 1, mean = 10)`
  CorrectAnswer: rnorm(mean=10, n=1)
  AnswerTests: any_of_exprs('rnorm(mean=10,n=1)','rnorm(n=1,mean=10)')
  Hint: Try typing rnorm(mean = 10, n = 1)
  
- Class: text
  Output: "Other examples of functions that take in more than one argument are the arithmetic operators you've been using. In fact, they're functions in disguise. You want proof? If you wrap the operator with backticks (` `), you can use them as if they were a function name. Like so: `+`(4, 7) "

- Class: text
  Output: "On Canadian/American English keyboards, you can find the backtick to the left of the `1` key. Needless to say, this inconvenient notation is never used in practice."
  
- Class: text
  Output: "Now, you might be wondering how you could possibly remember all of these function arguments and their order (or their names). A really useful feature of R is that you can open the help page (also called a manual) for any function by running `?` followed by the function name. In this case, you don't include the parentheses because you don't want to run the function. If you do this in RStudio, it will open the function help page in the Help pane, where the Files are usually located."
  
- Class: cmd_question
  Output: "Let's try it. Try typing '?sin'"
  CorrectAnswer: ?sin
  AnswerTests: omnitest(correctExpr='?sin')
  Hint: Try typing '?sin'
  
- Class: text
  Output: "These help pages can be esoteric and hard to read. Don't panic. You will get used to them over time. There are a few common sections: Title, Description, Usage, Arguments, Details, Value, and Examples. Generally, these manuals are useful to learn about function arguments and to see working examples in action. If the function help page isn't enough, you can always use Google to find more information online. **Pro tip:** You can also open the manual for operators like `+` using backticks."
  
- Class: text
  Output: Logical Comparisons!
  
- Class: text
  Output: "In addition to arithmetic operations, you can perform the following logical comparisons:"
  
- Class: text
  Output: "`==`: Is equal to (note the double equal sign)"
  
- Class: text
  Output: "`!=`:  Is unequal to"
  
- Class: text
  Output: "`>` and `>=`: Is greater than (or equal to)"
  
- Class: text
  Output: "`<` and `<=`: Is lesser than (or equal to)"
  
- Class: text
  Output: "These operators are most commonly used to compare numbers. The output of these operations can be one of two values: `TRUE` or `FALSE`. In other programming languages, these are called boolean values. In R, they are referred to as logical values."
  
- Class: cmd_question
  Output: Try typing '1 == 1' to see what the output looks like
  CorrectAnswer: 1 == 1
  AnswerTests: omnitest(correctExpr='1 == 1')
  Hint: Try typing 1 == 1

- Class: cmd_question
  Output: Try typing 2 > 5 next!
  CorrectAnswer: 2 > 5
  AnswerTests: omnitest(correctExpr='2 > 5')
  Hint: Try typing 2 > 5

- Class: text
  Output: "One important aspect of numeric comparisons in R (and any programming language, for that matter) is that you need to take special caution when comparison decimal numbers (also known as floating point numbers or doubles). Case in point, you can compare if two infinitesimal numbers are equal to zero:"
  
- Class: cmd_question
  Output: Try typing '1e-324 == 0'
  CorrectAnswer: 1e-324 == 0
  AnswerTests: omnitest(correctExpr='1e-324 == 0')
  Hint: Try typing 1e-324 == 0
  
- Class: text
  Output: "Because computers represents everything as zeros and ones, two decimal numbers that look the same (and should be the same) might not be considered the same when using the `==` operator. For more technical details, you should check out the [Floating Point Guide](http://floating-point-gui.de/). The workaround is to use the `all.equal()` function, which will tolerate tiny differences when comparing floating point numbers."
  
- Class: cmd_question
  Output: Try using the function all.equal() to compare 1e-324 and 0
  CorrectAnswer: all.equal(1e-324, 0)
  AnswerTests: omnitest(correctExpr='all.equal(1e-324, 0)')
  Hint: Try typing all.equal(1e-324, 0)
  
- Class: text
  Output: Storing Values in Variables!
  
- Class: text
  Output: "Rarely will you need to open R and perform one operation. In virtually every situation, you will need to perform a series of operations, each building on top of previous ones. To simplify the re-use of values, programming languages offer the ability to define variables. A variable can store a value, also known as an object, for later retrieval. You can retrieve the contents of a variable by referring to its name."
  
- Class: text
  Output: "Look at this expression: `x <- 3 * 7`."
  
- Class: text
  Output: "Here, we're calculating the product of 3 and 7 first, and then storing the result of this calculation in a variable called `x`. Notice that unlike our operations from above, there is no output. That's because the output was 'captured' and stored in the variable. The `<-` operator is known as the assignment operator, because you assign a value to a variable." 

- Class: cmd_question
  Output: Try it yourself! Try typing x <- 3 * 7
  CorrectAnswer: x <- 3 * 7
  AnswerTests: omnitest(correctExpr=' x <- 3 * 7')
  Hint: Try typing  x <- 3 * 7
  
- Class: text
  Output: "Here, the name `x` is arbitrary. Variable names can be anything as long as certain rules are met, which are listed below. Note that the last bullet point is a matter of personal taste. Whatever you choose, **consistency** is what matters most, and you are encouraged to use more descriptive variable names because it helps make code more readable."
  
- Class: text
  Output: "They can contain letters, numbers, underscores and periods, but no spaces."
  
- Class: text
  Output: "They must start with a letter or a period followed by a letter. "
  
- Class: text
  Output: "They cannot start with a number nor an underscore. "
  
- Class: text
  Output: "Variables beginning with a period are hidden variables. "
  
- Class: text
  Output: "Different people use different conventions for long variable names, including `periods.between.words`, `underscores_between_words`, or `camelCaseToSeparateWords`."
  
- Class: cmd_question
  Output: "Now, back to the variable `x`. If we wanted to see the contents of the variable `x`, we simply refer to it by name. Try typing x"
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: x
  
- Class: text
  Output: "If you run into an `Error: object 'x' not found` error, that means you never defined the variable `x`. Here, 'define' refers to the act of storing/assigning a value to `x`. In this case, make sure to run the `x <- 3 * 7` line of R code above."
  
- Class: text
  Output: "The utility of variables comes from the ability to use them in other operations. For instance, we can calculate the natural logarithm of the value stored in `x`. Alternatively, we can store that new value in another variable called `y`."
  
- Class: cmd_question
  Output: Try it out!
  CorrectAnswer: y <- log(x)
  AnswerTests: omnitest(correctExpr='y <- log(x)')
  Hint: try typing y <- log(x)
  
- Class: text
  Output: "As we define these variables, you will notice that new entries appear in the Environment pane in RStudio, each corresponding to a variable. This is a convenient way of keeping track of all existing variables. Unless you are storing large amounts of data in variables, there is practically no limit on the number of variables you can create."
  
- Class: text
  Output: "Case in point, the value stored in `y` was calculated from the natural logarithm of the value stored in `x`."
  
- Class: cmd_question
  Output: Let's recall x
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr = 'x')
  Hint: Type x
  
- Class: cmd_question
  Output: Let's recall y
  CorrectAnswer: y
  AnswerTests: omnitest(correctExpr = 'y')
  Hint: Type y
  
- Class: cmd_question
  Output: "If we update `x` to another value, you can see that the value of `y` remains unchanged. This is also reflected in the Environment pane. If you want to update the value of `y`, you would need to re-run the calculation from earlier. Try executing 'x <- 1 / 40'"
  CorrectAnswer: x <- 1 / 40
  AnswerTests: omnitest(correctExpr='x <- 1 / 40')
  Hint: x <- 1 / 40
  
- Class: cmd_question
  Output: Now, let's recall x again
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Type x
  


  
  





  



  
  

