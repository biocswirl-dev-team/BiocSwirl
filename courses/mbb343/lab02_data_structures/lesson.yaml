- Class: meta
  Course: mbb343
  Lesson: lab02
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.5

- Class: text
  Output: In the previous tutorial, you learned how to navigate the RStudio interface and ran your first bits of R code. You should now be familair with operators like `+` (mathematical) and `==` (logical) as well as functions like `sqrt()`. 
  
- Class: text
  Output: "Don't worry: you don't have to remember every function and their respective arguments (_i.e._ inputs). You can use Google and the R help pages for this, like every other data scientist. "
  
- Class: text
  Output: Today, we're going to take a look at what data looks like in R. Each programming language organizes their data in different ways. These are known as data structures. This tutorial will focus on the most important data structure in R, the data frame, and its key component, the vector. These data structures are fundamental to data science in R, so pay close attention. 
  
- Class: text
  Output: You will be exploring the Canadian COVID-19 statistics for the first six months of 2020. The data was originally downloaded from the [EU Open Data Portal](https://data.europa.eu/euodp/en/data/dataset/covid-19-coronavirus-data). It was lightly processed for this tutorial. 
  
- Class: text
  Output: Data Frames!
  
# Loading Data frames
- Class: text
  Output: "Let's start by loading the data. You will learn more about this process in a future tutorial. For now, you are going to simply load the data from the Internet and preview it. The `read.csv()` function can take a file path or a URL and returns a data frame. Let's see it in action!"
  
- Class: cmd_question
  Output: Try typing 'covid <- read.csv("https://bit.ly/cov-ca")'
  CorrectAnswer: covid <- read.csv("https://bit.ly/cov-ca")
  AnswerTests: omnitest(correctExpr='covid <- read.csv("https://bit.ly/cov-ca")')
  Hint: Just type covid <- read.csv("https://bit.ly/cov-ca")
  
- Class: cmd_question
  Output: Now, look at the data we loaded and assigned to 'covid'
  CorrectAnswer: covid
  AnswerTests: omnitest(correctExpr='covid')
  Hint: Just type covid
  
- Class: text
  Output: "As you can see, a data frame is nothing more than a two-dimensional table consisting of rows and columns. This one has six rows (one for each month) and five columns. The columns contain different types of information: either integers or text. In many respects, data frames look like Excel tables. However, data frames in R are strictly rectangular. Every column has the same length, and the same rule applies to rows. This doesn't mean you can't have missing data. Rather, you will see missing data indicated by the value `NA` (not seen here in `covid`)."
  
- Class: cmd_question
  Output: Class (and the function 'class()') is another way to refer to what kind of data structure is stored in a variable. Here, we can confirm that the `covid` variable contains a data frame. Use the class() function to confirm.
  CorrectAnswer: class(covid)
  AnswerTests: omnitest(correctExpr='class(covid)')
  Hint: Try typing 'class(covid)'
  
# Exploring the data frame
- Class: text
  Output: "As we saw in the previous tutorial, functions can be very useful. In fact, there are a number of functions that work well with data frames. Notably, the `nrow()` and `ncol()` functions can be used to count the number of rows and columns in the input, respectively. Admittedly, this is more useful with larger datasets."
  
- Class: cmd_question
  Output: Try the function "ncol()" on our covid data frame.
  CorrectAnswer: ncol(covid)
  AnswerTests: omnitest(correctExpr='ncol(covid)')
  Hint: Try typing 'ncol(covid)'
  
- Class: cmd_question
  Output: Try the function "nrow()" on our covid data frame
  CorrectAnswer: nrow(covid)
  AnswerTests: omnitest(correctExpr='nrow(covid)')
  Hint: Try typing 'nrow(covid)'
  
- Class: cmd_question
  Output: Another useful function is called `summary()` which will display statistics for numeric columns and tabulate values in text columns. Try it out!
  CorrectAnswer: summary(covid)
  AnswerTests: omnitest(correctExpr='summary(covid)')
  Hint: Try typing 'summary(covid)'
  
- Class: cmd_question
  Output: The `head()` and `tail()` functions are useful for extracting the first or last few rows in a data frame. These are especially useful for larger data frames. Try using head(). 
  CorrectAnswer: head(covid)
  AnswerTests: omnitest(correctExpr='head(covid)')
  Hint: Try typing 'head(covid)'
  
- Class: text
  Output: Vectors!

# Performing Operations on Vectors 
- Class: cmd_question
  Output: "That's enough boring stuff for now. Let's start actually handling the data. The most basic operation you can do with a data frame is extracting a column. There are several ways of doing this, but the simplest is the `$` operator. For example, if we want to extract the `cases` column, which contains the number of new COVID-19 cases during each month in Canada. You can clearly see the rapid increase in cases and eventual plateau once social distancing slowed down the outbreak. Try it out!"
  CorrectAnswer: covid$cases
  AnswerTests: omnitest(correctExpr='covid$cases')
  Hint: Try typing 'covid$cases'

- Class: text
  Output: "It might be surprising to see the column laid out horizontally. That's because it's no longer considered a column of the data frame after we use the `$` operator. Specifically, columns consist of a data structure known as a vector."
  
- Class: cmd_question
  Output: Vectors can contain multiple elements. E.g. in the case of covid$cases, it contains multiple integers. R allows for some functions and operations to be applied to each element of the vector. This is called vectorization. Try dividing each element in the vector covid$cases by 1000 and assigning the result to covd$cases_1000, which will create a new column in the data frame.
  CorrectAnswer: covid$cases_1000 <- covid$cases / 1000
  AnswerTests: omnitest(correctExpr='covid$cases_1000 <- covid$cases/1000')
  Hint: Try typing 'covid$cases_1000 <- covid$cases / 1000'
  
- Class: cmd_question
  Output: Let's check our work by recalling the covid data frame.
  CorrectAnswer: covid
  AnswerTests: omnitest(correctExpr='covid')
  Hint: Try typing 'covid'
  
- Class: cmd_question
  Output: Vectorization also works with pasting strings and elements from the vectors together. Try typing 'paste("Canada had", covid$cases_1000, "thousand cases in", covid$month)' and see what happens!
  CorrectAnswer: paste("Canada had", covid$cases_1000, "thousand cases in", covid$month)
  AnswerTests: omnitest(correctExpr='paste("Canada had", covid$cases_1000, "thousand cases in", covid$month)')
  Hint: Copy the command from the question!
  
# Types of vectors
- Class: text
  Output: "Some operations on vectors might fail. For example this one 'covid$month + covid$cases_1000' will produce the following error: 'non-numeric argument to binary operator'"
 
- Class: text
  Output: This error came up because we tried to add up two different types of vectors. There are six different types of vectors in total. Vectors can contain integers (abbreviated to 'int'), numeric elements ('num'), strings or characters ('chr'), logical elements (TRUE/FALSE) ('logi'), raw sequences of bytes ('raw'), or complex values ('cplx').
  
- Class: cmd_question
  Output: With the function typeof() you can find out what type of vector you're working with. Try it out on covid$cases!
  CorrectAnswer: typeof(covid$cases)
  AnswerTests: omnitest(correctExpr='typeof(covid$cases)')
  Hint: Try typing 'typeof(covid$cases)'
  
- Class: cmd_question
  Output: The function str() will compactly display the structure of an R object. If you use it on 'covid', you will see what type of vector each column of the data frame is. Try it out!
  CorrectAnswer: str(covid)
  AnswerTests: omnitest(correctExpr='str(covid)')
  Hint: Try typing 'str(covid)'
  
- Class: mult_question
  Output: Which type of vector is covid$month?
  AnswerChoices: complex;raw;integer;numeric;logical;character
  CorrectAnswer: character
  AnswerTests: omnitest(correctVal = 'character')
  Hint: Check the output of 'str(covid)'
  
- Class: cmd_question
  Output: You can create vectors of any type using the function vector(). The argument 'mode' describes the type of vector, the argument length describes how many elements the vector should contain. Try creating a character vector with 3 elements and assign it to 'new_vector'. You can type ?vector() for more information about the function.
  CorrectAnswer: new_vector <- vector(mode = "character", length = 3)
  AnswerTests: omnitest(correctExpr = 'new_vector <- vector(mode = "character", length = 3)')
  Hint: Try typing 'new_vector <- vector(mode = "character", length = 3)'
  
- Class: cmd_question
  Output: Now look at your newly created vector with str().
  CorrectAnswer: str(new_vector)
  AnswerTests: omnitest(correctExpr = 'str(new_vector)')
  Hint: Try typing 'str(new_vector)'
  
# Concatenation
- Class: text
  Output: The function c() allows you to concatenate multiple elements of the same (or different - more on that later) type into a vector
  
- Class: cmd_question
  Output: Try concatenating the logical elements 'TRUE','FALSE',and 'FALSE' into a vector and assign it to 'lgl_vector'.
  CorrectAnswer: lgl_vector <- c(TRUE, FALSE, FALSE)
  AnswerTests: omnitest(correctExpr = 'lgl_vector <- c(TRUE, FALSE, FALSE)')
  Hint: Try typing 'lgl_vector <- c(TRUE, FALSE, FALSE)'
  
- Class: cmd_question
  Output: Now test which type the vector is that you just created.
  CorrectAnswer: typeof(lgl_vector)
  AnswerTests: omnitest(correctExpr = 'typeof(lgl_vector)')
  Hint: Try using the function typeof() on 'lgl_vector'
  
- Class: cmd_question
  Output: Now, try concatenating the numbers 1, 0.34, and 11.45 into a vector and assign it to 'num_vector'
  CorrectAnswer: num_vector <- c(1,0.34,11.45)
  AnswerTests: omnitest(correctExpr = 'num_vector <- c(1,0.34,11.45)')
  Hint: Try typing 'num_vector <- c(1,0.34,11.45)'
  
# Type coercion
- Class: text
  Output: In theory, you can concatenate different types of elements into mixed vectors as well. In practice, this is rarely convenient.
  
- Class: cmd_question
  Output: "In the next few steps, we will create a vector containing mixed type elements and observe what happens to its contents. Let's start by concatenating two logical elements. Try this: 'mixed_vector <- c(FALSE, TRUE)'"
  CorrectAnswer: mixed_vector <- c(FALSE, TRUE)
  AnswerTests: omnitest(correctExpr = 'mixed_vector <- c(FALSE, TRUE)')
  Hint: Just copy the code from the prompt
  
- Class: cmd_question
  Output: Look at the vector you just created!
  CorrectAnswer: mixed_vector
  AnswerTests: omnitest(correctExpr = 'mixed_vector')
  Hint: Try typing 'mixed_vector'
  
- Class: cmd_question
  Output: Now, we will add a numeric element (0.3) to the mixed vector. This can be done by concatenating the mixed vector and 0.3 and assigning the result to 'mixed vector' again. Give it a try!
  CorrectAnswer: mixed_vector <- c(mixed_vector, 0.3)
  AnswerTests: omnitest(correctExpr = 'mixed_vector <- c(mixed_vector, 0.3)')
  Hint: Try typing 'mixed_vector <- c(mixed_vector, 0.3)'
  
- Class: cmd_question
  Output: Look at mixed_vector again and see how it changed!
  CorrectAnswer: mixed_vector
  AnswerTests: omnitest(correctExpr = 'mixed_vector')
  Hint: Try typing 'mixed_vector'
  
- Class: cmd_question
  Output: Finally, we will add a string ("four") to the mixed vector. 
  CorrectAnswer: mixed_vector <- c(mixed_vector, "four")
  AnswerTests: omnitest(correctExpr = 'mixed_vector <- c(mixed_vector, "four")')
  Hint: Try typing 'mixed_vector <- c(mixed_vector, "four")'
  
- Class: cmd_question
  Output: Look at mixed_vector again and see how it changed!
  CorrectAnswer: mixed_vector
  AnswerTests: omnitest(correctExpr = 'mixed_vector')
  Hint: Try typing 'mixed_vector'
  
- Class: cmd_question
  Output: We can forcibly change the type of the vector in a process called coercion. Coercion functions are e.g. as.numeric(), coercing a vector into a numeric one, or as.logical(), turning every element of a vector into a logical element. Be aware, that this can lead to a loss of information. Try coercing 'mixed_vector' into a numeric vector.
  CorrectAnswer: as.numeric(mixed_vector)
  AnswerTests: omnitest(correctExpr = 'as.numeric(mixed_vector)')
  Hint: Try typing as.numeric(mixed_vector)
  
- Class: cmd_question
  Output: Let's go back to our covid data frame. Try changing the vector covid$cases_1000 from numeric to integer, using the coercion function as.integer(). Be sure to assign the result to covid$cases_1000 again.
  CorrectAnswer: covid$cases_1000 <- as.integer(covid$cases_1000)
  AnswerTests: omnitest(correctExpr = 'covid$cases_1000 <- as.integer(covid$cases_1000)')
  Hint: Try typing 'covid$cases_1000 <- as.integer(covid$cases_1000)'
 
# Factors
- Class: text
  Output: Factors!
  
- Class: text
  Output: Factors are a type of R object, not unlike vectors. However, in addition its elements, it further categorizes its elements and stores these categories as levels. Factors are especially useful for columns of data frames with very limited unique values. For example columns containing gender information, countries, or months.
  
- Class: cmd_question
  Output: To better understand what a factor is, try extracting covid$month, turning it into a factor with the function factor() and assign it to 'months'.
  CorrectAnswer: months <- factor(covid$month)
  AnswerTests: omnitest(correctExpr = 'months <- factor(covid$month)')
  Hint: Try typing 'months <- factor(covid$month)'
  
- Class: cmd_question
  Output: Now look at the object you just created
  CorrectAnswer: months
  AnswerTests: omnitest(correctExpr = 'months')
  Hint: Just type 'months'
  
- Class: text
  Output: The factor 'months' contains two sets of information. First, the character strings as found in our data frame. Then, those data organized into categories (levels) and sorted alphabetically.
  
- Class: cmd_question
  Output: You can extract specifically the levels of a factor using the function levels(). Try it on 'months'!
  CorrectAnswer: levels(months)
  AnswerTests: omnitest(correctExpr = 'levels(months)')
  Hint: Try typing 'levels(months)'

- Class: cmd_question
  Output: You can also manually set the levels of a factor. Try executing the following - 'factor(covid$month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun"))'
  CorrectAnswer: factor(covid$month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun"))
  AnswerTests: omnitest(correctExpr = 'factor(covid$month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun"))')
  Hint: Try typing 'factor(covid$month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun"))'
  
# Lists

- Class: text
  Output: Lists!
  
- Class: text
  Output: Lists have a similar structure to data frames, they can contain several vectors of different types. However, the different vectors in a list can have different lengths.  
  
# continue here
- Class: cmd_question
  Output: Execute the following to create a list with different types of elements - 'list_example <- list(FALSE, TRUE, 2L, 3.0, "four")'
  CorrectAnswer: list_example <- list(FALSE, TRUE, 2L, 3.0, "four")
  AnswerTests: omnitest(correctExpr = 'list_example <- list(FALSE, TRUE, 2L, 3.0, "four")')
  Hint: Copy the code from the prompt and execute it.
  
- Class: cmd_question
  Output: Now recall 'list_example' to see what a list can look like
  CorrectAnswer: list_example
  AnswerTests: omnitest(correctExpr = 'list_example')
  Hint: Try typing 'list_example'.
  
- Class: text
  Output: We'll learn how to access these vectors via subsetting in a minute!

- Class: cmd_question
  Output: Another way of creating a list is by naming each vector and assigning the elements in one go. Like so 'another_list <- list(title = "Numbers", numbers = 1:10, data = TRUE)' Try it!
  CorrectAnswer: another_list <- list(title = "Numbers", numbers = 1:10, data = TRUE)
  AnswerTests: omnitest(correctExpr = 'another_list <- list(title = "Numbers", numbers = 1:10, data = TRUE)')
  Hint: Copy the code above!

  
- Class: cmd_question
  Output: "Now, let's look at 'another_list'"
  CorrectAnswer: another_list
  AnswerTests: omnitest(correctExpr = 'another_list')
  Hint: Try typing 'another_list'

  
- Class: cmd_question
  Output: You can access named vectors like you're used to access columns from a data frame. Try looking at the "numbers" vector of "another_list".
  CorrectAnswer: another_list$numbers
  AnswerTests: omnitest(correctExpr = 'another_list$numbers')
  Hint: Try typing 'another_list$numbers'
  
# Matrix
- Class: text
  Output: The Matrix!
  
- Class: text
  Output: A matrix is a two-dimensional R object, almost like a table. It is actually a vector with the additional attributes of dimensions (rows and columns).
  
- Class: text
  Output: A matrix can be created with the function matrix(), which takes a vector with the elements that will populate the matrix, as well as ncol and nrow attributes that are describing the dimensions of the matrix.
  
- Class: cmd_question
  Output: "Try out the following: 'matrix_example <- matrix(1:24, ncol=6, nrow=4)'. It will use the vector of integers ranging from 1 to 24 to populate a matrix with 4 rows and 6 columns."
  CorrectAnswer: matrix_example <- matrix(1:24, ncol=6, nrow=4)
  AnswerTests: omnitest(correctExpr = 'matrix_example <- matrix(1:24, ncol=6, nrow=4)')
  Hint: Try copying the code from above.
  
- Class: cmd_question
  Output: Remember can test if a variable is a matrix using the function class(). Try it out on 'matrix_example'
  CorrectAnswer: class(matrix_example)
  AnswerTests: omnitest(correctExpr = 'class(matrix_example)')
  Hint: Try typing 'class(matrix_example)'
  
- Class: text
  Output: The difference between data frames and matrices is that different columns of a data frame can contain different types of elements while all columns of a matrix have to contain the same type of elements.
  
- Class: text
  Output: Matrices are typically used to store numerical or integer values and are often used like mathematical matrices. By comparison, data frames can be used to store a variety of data for a variety of data wrangling purposes.
  
# subsetting
- Class: text
  Output: Subsetting! Let's figure out to extract subsets of data from all kinds of R objects.
  
- Class: cmd_question
  Output: "Let's quickly create vector for you to practice on. Assign covid$cases to 'x'."
  CorrectAnswer: x <- covid$cases
  AnswerTests: omnitest(correctExpr = 'x <- covid$cases')
  Hint: Try typing 'x <- covid$cases'
  
- Class: cmd_question
  Output: Add covid$month as the names to the vector.
  CorrectAnswer: names(x) <- covid$month
  AnswerTests: omnitest(correctExpr = 'names(x) <- covid$month')
  
# vector subsetting using indices
- Class: cmd_question
  Output: The first option for subsetting is using indices in square brackets. Remember, R is a 1 based language, so 1 will be the first possible index. Now, try to extract the first element of x!
  CorrectAnswer: x[1]
  AnswerTests: omnitest(correctExpr = 'x[1]')
  Hint: Try typing 'x[1]'
  
- Class: cmd_question
  Output: "You can extract multiple elements from a vector by creating a vector of indices using c() and placing that vector inside the square brackets. Like so: x[c(1,3,4)]. Try it out!"
  CorrectAnswer: x[c(1,3,4)]
  AnswerTests: omnitest(correctExpr = 'x[c(1,3,4)]')
  Hint: Copy the code from the prompt and execute it.
  
- Class: cmd_question
  Output: If you would like to extract the entire vector with the exception of one element, you can do so with negative indices. Try extracting everything but the second elements from x!
  CorrectAnswer: x[-2]
  AnswerTests: omnitest(correctExpr = 'x[-2]')
  Hint: Try typing 'x[-2]'
  
- Class: cmd_question
  Output: You can also exclude multiple elements by creating a vector of indices within the square brackets like we covered earlier. Both of the following are correct - 'x[c(-1, -5)]' or 'x[-c(1, 5)]'. Try one!  
  CorrectAnswer: x[c(-1, -5)]
  AnswerTests: any_of_exprs('x[c(-1, -5)]', 'x[-c(1, 5)]')
  Hint: Try copying either piece of code from the prompt.
  
# vector subsetting using names
- Class: cmd_question
  Output: Instead of indices, you can also subset using the names of the vector elements in the square brackets. Try extracting the covid cases for the month of February ("Feb").
  CorrectAnswer: x["Feb"]
  AnswerTests: omnitest(correctExpr = 'x["Feb"]')
  Hint: Try typing x["Feb"]
  
- Class: cmd_question
  Output: Similarly, you can extract multiple elements by name. Try extracting covid cases for the months of February and April.
  CorrectAnswer: x[c("Feb","Apr")]
  AnswerTests: omnitest(correctExpr = 'x[c("Feb","Apr")]')
  Hint: Try typing 'x[c("Feb","Apr")]'

# vector subsetting using  logical operations

# list subsetting

# data frame subsetting




