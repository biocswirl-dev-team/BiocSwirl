- Class: meta
  Course: ChIP
  Lesson: Peak Calling and Processing
  Author: Matthew Moss
  Type: Standard
  Organization: Donald And Barbara Zucker School of Medicine at Hofstra/Northwell
  Version: 2.4.5


#Peak Calling


- Class: text
  Output: Now that we've aligned our treatment and input control to the reference genome, it's time to find our binding sites. In order to do this, we will compare our treatment to controls and find areas on the genome where the treatment has substantially more reads. These regions will be called "peaks" due to the way they look like a peak when the alignments are visualized. In order to do this, we will be using an R package called normr. As usual, we begin by installing the package

- Class: cmd_question
  Output: Install normr
  CorrectAnswer: BiocManager::install('normr')
  AnswerTests: omnitest(BiocManager::install('normr'))
  Hint: Use BiocManager::install() to get the job done!

- Class: cmd_question
  Output: After installation, make sure to load your package using the "library" function. 
  CorrectAnswer: library("normr")
  AnswerTests: omnitest(library("normr"))
  Hint: The format should be "library(__"packageName"__)

- Class: text
  Output: We will now use normr to call our binding sites, or peaks. The format for this command is enrichR(treatment = "ChIP_file", control = "input_control", genome = "mm10", verbose = FALSE)


- Class: cmd_question
  Output: Try running it on your data! Save it to a variable called "enrich" for later use
  CorrectAnswer: enrich <- enrichR(treatment = "", control = "", genome = "mm10", verbose = FALSE)
  AnswerTests: omnitest(enrich <- enrichR(treatment = "", control = "", genome = "mm10", verbose = FALSE))
  Hint: Use ?normr::enrichR to see the help documentation!


- Class: text
  Output: Alright, now in order to get that output into something we can use, we're going to rapid fire through a process to extract the data we want from that object. In order, we use the "getRanges" function on our enrich variable to get all of the enriched genomic ranges. Then we use the "getQvalues" function to get our statistical significance. Then we use the "getEnrichment" function to get the enrichment score. We then filter out those peaks that don't meet our enrichment threshold. Finally, we filter based on an even more stringent qvalue threshold and save our newly made bed file!


- Class: cmd_question
  Output: Extract the binding sites using the "getRanges" function on your enrich variable. Save it to a variable called "peaks"
  CorrectAnswer: peaks <- getRanges(enrich)
  AnswerTests: omnitest(peaks <- getRanges(enrich))
  Hint: Use ?normr::getRanges to see the help documentation!

- Class: cmd_question
  Output: Add qvalue information using the "getQvalues" function and saving it to a column called "qvalue"
  CorrectAnswer: peaks$qvalue <- getQvalues(enrich)
  AnswerTests: omnitest(peaks$qvalue <- getQvalues(enrich))
  Hint: Use ?normr::getQvalues to see the help documentation!

- Class: cmd_question
  Output: Add enrichment score information using the "getEnrichment" function and saving it to a column called "enrichment"
  CorrectAnswer: peaks$enrichment <- getEnrichment(enrich)
  AnswerTests: omnitest(peaks$enrichment <- getEnrichment(enrich))
  Hint: Use ?normr::getQvalues to see the help documentation!

- Class: cmd_question
  Output: Filter peaks by enrichment score by subsetting out those that do not have an enriched component value
  CorrectAnswer: peaks <- subset(peaks, !is.na(component))
  AnswerTests: omnitest(peaks <- subset(peaks, !is.na(component)))
  Hint: Take a look at the ranges to see what values can be in the "enrichment" column, and thus what we're trying to filter out

- Class: cmd_question
  Output: Filter peaks by qvalue by subsetting below a threshold (in this case we'll be stringent and say the qvalue must be below 0.01)
  CorrectAnswer: peaks <- subset(peaks, qvalue < 0.01)
  AnswerTests: omnitest(peaks <- subset(peaks, qvalue < 0.01))
  Hint: Take a look at ?subset to understand how to subset data frames by a value!

- Class: cmd_question
  Output: Save this file to be used for further analyses. For ease of use, you should remove your row.names, keep your col.names, do not use quotes, and have a tab delimiter (sep = '\t')  
  CorrectAnswer: write.table(peaks, 'peaks.bed' , row.names=FALSE, col.names=TRUE, quote=FALSE, sep='\t')
  AnswerTests: omnitest(write.table(peaks, 'peaks.bed' , row.names=FALSE, col.names=TRUE, quote=FALSE, sep='\t'))
  Hint: Take a look at ?write.table to see how to export a data frame as a file!

- Class: text
  Output: Congratulations, you now have generated all of the binding sites for your TF or chromatin mark! This is a long process, and good job making it to the end. We will now annotate your peaks so that you can their functional distribution across the genome
